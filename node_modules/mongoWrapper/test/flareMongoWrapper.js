'use strict';
import assert from 'power-assert';
import MongoWrapper from '../lib/mongoWrapper';
import FlareMongoWrapper from '../lib/flareMongoWrapper';
import co from 'co';

/** @test FlareMongoWrapper */
describe('FlareMongoWrapper', () => {
	/** @test FlareMongoWrapper#constructor */
	describe('constructor()', () => {
		let mongo = new FlareMongoWrapper();
		it('FlareMongoWrapper extends MongoWrapper', () => {
			assert.ok(mongo instanceof MongoWrapper);
			assert.ok(mongo instanceof FlareMongoWrapper);
		});
	});

	/** @test FlareMongoWrapper#insertDevice */
	describe('insertDevice()', () => {
		let mongo = new FlareMongoWrapper();
		const sntdt = new Date();
		const month = 100 * sntdt.getFullYear() + sntdt.getMonth() + 1;
		afterEach(done => {
			mongo.getDB('dlog').then(db => {
				db.dropCollection(`devices_${ month }`);
				return;
			}).then(done);
		});
		it('insert into dlog.devices', () => {
			return co(function *(){
				const doc = { sntdt, did: 123456 };
				let result = yield mongo.insertDevice(doc, { w: 1 });
				assert.equal(result.ok, 1);
				assert.equal(result.n, 1);
				let find = yield mongo.find('dlog', `devices_${ month }`, {}, {}, {});
				const item = yield find.toArray();
				assert.equal(item.length, 1);
				return;
			}).then();
		});
	});
	/** @test FlareMongoWrapper#insertLocation */
	describe('insertLocation()', () => {
		let mongo = new FlareMongoWrapper();
		const lupdt = new Date();
		const month = 100 * lupdt.getFullYear() + lupdt.getMonth() + 1;
		afterEach(done => {
			mongo.getDB('llog').then(db => {
				db.dropCollection(`location_${ month }`);
				return;
			}).then(() => {
				done();
			});
		});
		it('insert into llog.location', () => {
			return co(function *(){
				const doc = { lupdt, did: 123456 };
				let result = yield mongo.insertLocation(doc, { w: 1 });
				assert.equal(result.ok, 1);
				assert.equal(result.n, 1);
				let find = yield mongo.find('llog', `location_${ month }`, {}, {}, {});
				const item = yield find.toArray();
				assert.equal(item.length, 1);
			});
		});
	});
	/** @test FlareMongoWrapper#insertEvent */
	describe('insertEvent()', () => {
		let mongo = new FlareMongoWrapper();
		const evtdt = new Date();
		const month = 100 * evtdt.getFullYear() + evtdt.getMonth() + 1;
		afterEach(done => {
			mongo.getDB('elog').then(db => {
				db.dropCollection(`event_${ month }`);
				return;
			}).then(() => {
				done();
			});
		});
		it('insert into elog.event', () => {
			return co(function *(){
				const doc = { evtdt, did: 123456 };
				let result = yield mongo.insertEvent(doc, { w: 1 });
				assert.equal(result.ok, 1);
				assert.equal(result.n, 1);
				let find = yield mongo.find('elog', `event_${ month }`, {}, {}, {});
				const item = yield find.toArray();
				assert.equal(item.length, 1);
				return;
			});
		});
	});
	/** @test FlareMongoWrapper#findDevice */
	describe('findDevice()', () => {
		let mongo = new FlareMongoWrapper();
		const now = new Date();
		const lstdt = new Date(now.getFullYear(), now.getMonth() - 1, 3);
		const thsdt = new Date(now.getFullYear(), now.getMonth() - 0, 3);
		const lmonth = 100 * lstdt.getFullYear() + lstdt.getMonth() + 1;
		const nmonth = 100 * thsdt.getFullYear() + thsdt.getMonth() + 1;

		beforeEach(done => {
			return co(function *(){
				for(let i = 0; i < 10; i++){
					const doc = { sntdt: new Date(lstdt.getTime() + i * 1000), cnt: i };
					yield mongo.insertDevice(doc, { w: 1 });
				}
				for(let i = 10; i < 20; i++){
					const doc = { sntdt: new Date(thsdt.getTime() + i * 1000), cnt: i };
					yield mongo.insertDevice(doc, { w: 1 });
				}
				return;
			}).then(done);
		});
		afterEach(done => {
			mongo.getDB('dlog').then(db => {
				db.dropCollection(`devices_${ nmonth }`);
				db.dropCollection(`devices_${ lmonth }`);
				return;
			}).then(() => {
				done();
			});
		});
		it('find from dlog.devices', () => {
			return co(function *(){
				const query = { sntdt: { $gte: lstdt }};
				const field = { _id: 0 };
				const option = { skip: 5, limit: 10, sort: { sntdt: 1} };
				let result = yield mongo.findDevice(query, field, option, true);
				assert.equal(result.length, 10);
				for(let i = 0; i < 10; i++){
					assert.equal(result[i].cnt, i + 5);
				}
			});
		});
	});
	/** @test FlareMongoWrapper#findLocation */
	describe('findLocation()', () => {
		let mongo = new FlareMongoWrapper();
		const now = new Date();
		const lstdt = new Date(now.getFullYear(), now.getMonth() - 1, 3);
		const thsdt = new Date(now.getFullYear(), now.getMonth() - 0, 3);
		const lmonth = 100 * lstdt.getFullYear() + lstdt.getMonth() + 1;
		const nmonth = 100 * thsdt.getFullYear() + thsdt.getMonth() + 1;

		beforeEach(done => {
			return co(function *(){
				for(let i = 0; i < 10; i++){
					const doc = { lupdt: new Date(lstdt.getTime() + i * 1000), cnt: i };
					yield mongo.insertLocation(doc, { w: 1 });
				}
				for(let i = 10; i < 20; i++){
					const doc = { lupdt: new Date(thsdt.getTime() + i * 1000), cnt: i };
					yield mongo.insertLocation(doc, { w: 1 });
				}
				return;
			}).then(done);
		});
		afterEach(done => {
			mongo.getDB('llog').then(db => {
				db.dropCollection(`location_${ nmonth }`);
				db.dropCollection(`location_${ lmonth }`);
				return;
			}).then(() => {
				done();
			});
		});
		it('find from llog.location', () => {
			return co(function *(){
				const query = { lupdt: { $gte: lstdt }};
				const field = { _id: 0 };
				const option = { skip: 5, limit: 10, sort: { lupdt: 1} };
				let result = yield mongo.findLocation(query, field, option, true);
				assert.equal(result.length, 10);
				for(let i = 0; i < 10; i++){
					assert.equal(result[i].cnt, i + 5);
				}
			});
		});
	});
	/** @test FlareMongoWrapper#findEvent */
	describe('findEvent()', () => {
		let mongo = new FlareMongoWrapper();
		const now = new Date();
		const lstdt = new Date(now.getFullYear(), now.getMonth() - 1, 3);
		const thsdt = new Date(now.getFullYear(), now.getMonth() - 0, 3);
		const lmonth = 100 * lstdt.getFullYear() + lstdt.getMonth() + 1;
		const nmonth = 100 * thsdt.getFullYear() + thsdt.getMonth() + 1;

		beforeEach(done => {
			return co(function *(){
				for(let i = 0; i < 10; i++){
					const doc = { evtdt: new Date(lstdt.getTime() + i * 1000), cnt: i };
					yield mongo.insertEvent(doc, { w: 1 });
				}
				for(let i = 10; i < 20; i++){
					const doc = { evtdt: new Date(thsdt.getTime() + i * 1000), cnt: i };
					yield mongo.insertEvent(doc, { w: 1 });
				}
				return;
			}).then(done);
		});
		afterEach(done => {
			mongo.getDB('elog').then(db => {
				db.dropCollection(`event_${ nmonth }`);
				db.dropCollection(`event_${ lmonth }`);
				return;
			}).then(() => {
				done();
			});
		});
		it('find from elog.event', () => {
			return co(function *(){
				const query = { evtdt: { $gte: lstdt }};
				const field = { _id: 0 };
				const option = { skip: 5, limit: 10, sort: { evtdt: 1} };
				let result = yield mongo.findEvent(query, field, option, true);
				assert.equal(result.length, 10);
				for(let i = 0; i < 10; i++){
					assert.equal(result[i].cnt, i + 5);
				}
			});
		});
	});
});

// let noop = v => {
// 	return;
// };
